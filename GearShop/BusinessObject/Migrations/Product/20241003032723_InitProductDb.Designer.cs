// <auto-generated />
using BusinessObject.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations.Product
{
    [DbContext(typeof(ProductContext))]
    [Migration("20241003032723_InitProductDb")]
    partial class InitProductDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Models.Entity.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("BrandLogo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Category", b =>
                {
                    b.Property<int>("CateId")
                        .HasColumnType("int");

                    b.Property<string>("CateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar");

                    b.HasKey("CateId");

                    b.ToTable("Categorys");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Product", b =>
                {
                    b.Property<string>("ProId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CateId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryCateId")
                        .HasColumnType("int");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("ProDes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("ProPrice")
                        .HasColumnType("float");

                    b.Property<int>("ProQuan")
                        .HasColumnType("int");

                    b.HasKey("ProId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryCateId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductAttribute", b =>
                {
                    b.Property<string>("ProId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("ProductProId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("ProId");

                    b.HasIndex("ProductProId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductImage", b =>
                {
                    b.Property<string>("ProId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<string>("ProImg")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("ProductProId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("ProId");

                    b.HasIndex("ProductProId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Product", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Entity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryCateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductAttribute", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductProId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.ProductImage", b =>
                {
                    b.HasOne("BusinessObject.Models.Entity.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductProId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BusinessObject.Models.Entity.Product", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductImages");
                });
#pragma warning restore 612, 618
        }
    }
}
